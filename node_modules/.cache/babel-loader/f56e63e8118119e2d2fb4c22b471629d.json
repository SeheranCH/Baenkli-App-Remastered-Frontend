{"ast":null,"code":"import * as Yup from \"yup\";\nconst regexOnlyLetters = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ]+$/;\nconst regexPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%#?&])[a-zA-Z\\d@$!%#?&]+$/;\nconst validationOnlyLetters = \"Must have only letters\";\nconst validationPassword = \"At least 1 upper-case letter, 1 lower-case letter and 1 special character --> @$!%#?&\";\nconst validationMaxNames = \"Max. 50 characters\";\nconst validationsMinPassword = \"Min. 8 characters\";\nexport const UpdateUserValidationSchema = Yup.object().shape({\n  username: Yup.string().trim().max(50, validationMaxNames).required(\"Username required\"),\n  email: Yup.string().trim().email(\"Invalid email\").required(\"Email required\").max(50, validationMaxNames),\n  emailRepeat: Yup.string().trim().email(\"Invalid email\").max(50, validationMaxNames).oneOf([Yup.ref('email')], \"Emails don't match\").nullable(true),\n  password: Yup.string().trim().min(8, validationsMinPassword).matches(regexPassword, validationPassword).nullable(true),\n  passwordRepeat: Yup.string().trim().min(8, validationsMinPassword).oneOf([Yup.ref('password')], \"Passwords don't match\").nullable(true),\n  firstName: Yup.string().trim().required('First name required').matches(regexOnlyLetters, validationOnlyLetters).max(50, validationMaxNames),\n  lastName: Yup.string().trim().required('Last name required').matches(regexOnlyLetters, validationOnlyLetters).max(50, validationMaxNames).notOneOf([Yup.ref('firstName')], \"Names may not match\")\n});","map":{"version":3,"sources":["C:/Users/swesthauser/Documents/_D/Workspace/tbz/Baenkli-App-Remastered-Frontend/src/components/other/validation/UpdateUserValidationSchema.js"],"names":["Yup","regexOnlyLetters","regexPassword","validationOnlyLetters","validationPassword","validationMaxNames","validationsMinPassword","UpdateUserValidationSchema","object","shape","username","string","trim","max","required","email","emailRepeat","oneOf","ref","nullable","password","min","matches","passwordRepeat","firstName","lastName","notOneOf"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,MAAMC,gBAAgB,GAAG,0BAAzB;AACA,MAAMC,aAAa,GAAG,mEAAtB;AACA,MAAMC,qBAAqB,GAAG,wBAA9B;AACA,MAAMC,kBAAkB,GAAG,uFAA3B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AACA,MAAMC,sBAAsB,GAAG,mBAA/B;AAEA,OAAO,MAAMC,0BAA0B,GAAGP,GAAG,CAACQ,MAAJ,GAAaC,KAAb,CAAmB;AACzDC,EAAAA,QAAQ,EAAEV,GAAG,CAACW,MAAJ,GACLC,IADK,GAELC,GAFK,CAED,EAFC,EAEGR,kBAFH,EAGLS,QAHK,CAGI,mBAHJ,CAD+C;AAMzDC,EAAAA,KAAK,EAAEf,GAAG,CAACW,MAAJ,GACFC,IADE,GAEFG,KAFE,CAEI,eAFJ,EAGFD,QAHE,CAGO,gBAHP,EAIFD,GAJE,CAIE,EAJF,EAIMR,kBAJN,CANkD;AAYzDW,EAAAA,WAAW,EAAEhB,GAAG,CAACW,MAAJ,GACRC,IADQ,GAERG,KAFQ,CAEF,eAFE,EAGRF,GAHQ,CAGJ,EAHI,EAGAR,kBAHA,EAIRY,KAJQ,CAIF,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,OAAR,CAAD,CAJE,EAIkB,oBAJlB,EAKRC,QALQ,CAKC,IALD,CAZ4C;AAmBzDC,EAAAA,QAAQ,EAAEpB,GAAG,CAACW,MAAJ,GACLC,IADK,GAELS,GAFK,CAED,CAFC,EAEEf,sBAFF,EAGLgB,OAHK,CAGGpB,aAHH,EAGkBE,kBAHlB,EAILe,QAJK,CAII,IAJJ,CAnB+C;AAyBzDI,EAAAA,cAAc,EAAEvB,GAAG,CAACW,MAAJ,GACXC,IADW,GAEXS,GAFW,CAEP,CAFO,EAEJf,sBAFI,EAGXW,KAHW,CAGL,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,UAAR,CAAD,CAHK,EAGkB,uBAHlB,EAIXC,QAJW,CAIF,IAJE,CAzByC;AA+BzDK,EAAAA,SAAS,EAAExB,GAAG,CAACW,MAAJ,GACNC,IADM,GAENE,QAFM,CAEG,qBAFH,EAGNQ,OAHM,CAGErB,gBAHF,EAGoBE,qBAHpB,EAINU,GAJM,CAIF,EAJE,EAIER,kBAJF,CA/B8C;AAqCzDoB,EAAAA,QAAQ,EAAEzB,GAAG,CAACW,MAAJ,GACLC,IADK,GAELE,QAFK,CAEI,oBAFJ,EAGLQ,OAHK,CAGGrB,gBAHH,EAGqBE,qBAHrB,EAILU,GAJK,CAID,EAJC,EAIGR,kBAJH,EAKLqB,QALK,CAKI,CAAC1B,GAAG,CAACkB,GAAJ,CAAQ,WAAR,CAAD,CALJ,EAK4B,qBAL5B;AArC+C,CAAnB,CAAnC","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst regexOnlyLetters = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ]+$/;\r\nconst regexPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%#?&])[a-zA-Z\\d@$!%#?&]+$/;\r\nconst validationOnlyLetters = \"Must have only letters\";\r\nconst validationPassword = \"At least 1 upper-case letter, 1 lower-case letter and 1 special character --> @$!%#?&\"\r\nconst validationMaxNames = \"Max. 50 characters\";\r\nconst validationsMinPassword = \"Min. 8 characters\";\r\n\r\nexport const UpdateUserValidationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .trim()\r\n        .max(50, validationMaxNames)\r\n        .required(\"Username required\")\r\n    ,\r\n    email: Yup.string()\r\n        .trim()\r\n        .email(\"Invalid email\")\r\n        .required(\"Email required\")\r\n        .max(50, validationMaxNames)\r\n    ,\r\n    emailRepeat: Yup.string()\r\n        .trim()\r\n        .email(\"Invalid email\")\r\n        .max(50, validationMaxNames)\r\n        .oneOf([Yup.ref('email')], \"Emails don't match\")\r\n        .nullable(true)\r\n    ,\r\n    password: Yup.string()\r\n        .trim()\r\n        .min(8, validationsMinPassword)\r\n        .matches(regexPassword, validationPassword)\r\n        .nullable(true)\r\n    ,\r\n    passwordRepeat: Yup.string()\r\n        .trim()\r\n        .min(8, validationsMinPassword)\r\n        .oneOf([Yup.ref('password')], \"Passwords don't match\")\r\n        .nullable(true)\r\n    ,\r\n    firstName: Yup.string()\r\n        .trim()\r\n        .required('First name required')\r\n        .matches(regexOnlyLetters, validationOnlyLetters)\r\n        .max(50, validationMaxNames)\r\n    ,\r\n    lastName: Yup.string()\r\n        .trim()\r\n        .required('Last name required')\r\n        .matches(regexOnlyLetters, validationOnlyLetters)\r\n        .max(50, validationMaxNames)\r\n        .notOneOf([Yup.ref('firstName')], \"Names may not match\")\r\n    \r\n});"]},"metadata":{},"sourceType":"module"}