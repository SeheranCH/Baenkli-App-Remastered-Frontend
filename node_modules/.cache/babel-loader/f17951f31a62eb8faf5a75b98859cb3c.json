{"ast":null,"code":"import * as Yup from \"yup\";\nconst regexOnlyLetters = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ]+$/;\nconst validationOnlyLetters = \"Must have only letters\";\nconst validationMaxNames = \"Max. 50 characters\";\nexport const UpdateUserValidationSchema = Yup.object().shape({\n  username: Yup.string().trim().max(50, validationMaxNames).required(\"Username required\"),\n  email: Yup.string().trim().email(\"Invalid email\").required(\"Email required\").max(50, validationMaxNames),\n  emailRepeat: Yup.string().trim().email(\"Invalid email\").max(50, validationMaxNames).oneOf([Yup.ref('email')], \"Emails don't match\").nullable(true),\n  firstName: Yup.string().trim().required('First name required').matches(regexOnlyLetters, validationOnlyLetters).max(50, validationMaxNames),\n  lastName: Yup.string().trim().required('Last name required').matches(regexOnlyLetters, validationOnlyLetters).max(50, validationMaxNames).notOneOf([Yup.ref('firstName')], \"Names may not match\")\n});","map":{"version":3,"sources":["C:/Users/swesthauser/Documents/_D/Workspace/tbz/Baenkli-App-Remastered-Frontend/src/components/other/validation/UpdateUserValidationSchema.js"],"names":["Yup","regexOnlyLetters","validationOnlyLetters","validationMaxNames","UpdateUserValidationSchema","object","shape","username","string","trim","max","required","email","emailRepeat","oneOf","ref","nullable","firstName","matches","lastName","notOneOf"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,MAAMC,gBAAgB,GAAG,0BAAzB;AACA,MAAMC,qBAAqB,GAAG,wBAA9B;AACA,MAAMC,kBAAkB,GAAG,oBAA3B;AAEA,OAAO,MAAMC,0BAA0B,GAAGJ,GAAG,CAACK,MAAJ,GAAaC,KAAb,CAAmB;AACzDC,EAAAA,QAAQ,EAAEP,GAAG,CAACQ,MAAJ,GACLC,IADK,GAELC,GAFK,CAED,EAFC,EAEGP,kBAFH,EAGLQ,QAHK,CAGI,mBAHJ,CAD+C;AAMzDC,EAAAA,KAAK,EAAEZ,GAAG,CAACQ,MAAJ,GACFC,IADE,GAEFG,KAFE,CAEI,eAFJ,EAGFD,QAHE,CAGO,gBAHP,EAIFD,GAJE,CAIE,EAJF,EAIMP,kBAJN,CANkD;AAYzDU,EAAAA,WAAW,EAAEb,GAAG,CAACQ,MAAJ,GACRC,IADQ,GAERG,KAFQ,CAEF,eAFE,EAGRF,GAHQ,CAGJ,EAHI,EAGAP,kBAHA,EAIRW,KAJQ,CAIF,CAACd,GAAG,CAACe,GAAJ,CAAQ,OAAR,CAAD,CAJE,EAIkB,oBAJlB,EAKRC,QALQ,CAKC,IALD,CAZ4C;AAmBzDC,EAAAA,SAAS,EAAEjB,GAAG,CAACQ,MAAJ,GACNC,IADM,GAENE,QAFM,CAEG,qBAFH,EAGNO,OAHM,CAGEjB,gBAHF,EAGoBC,qBAHpB,EAINQ,GAJM,CAIF,EAJE,EAIEP,kBAJF,CAnB8C;AAyBzDgB,EAAAA,QAAQ,EAAEnB,GAAG,CAACQ,MAAJ,GACLC,IADK,GAELE,QAFK,CAEI,oBAFJ,EAGLO,OAHK,CAGGjB,gBAHH,EAGqBC,qBAHrB,EAILQ,GAJK,CAID,EAJC,EAIGP,kBAJH,EAKLiB,QALK,CAKI,CAACpB,GAAG,CAACe,GAAJ,CAAQ,WAAR,CAAD,CALJ,EAK4B,qBAL5B;AAzB+C,CAAnB,CAAnC","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst regexOnlyLetters = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ]+$/;\r\nconst validationOnlyLetters = \"Must have only letters\";\r\nconst validationMaxNames = \"Max. 50 characters\";\r\n\r\nexport const UpdateUserValidationSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n        .trim()\r\n        .max(50, validationMaxNames)\r\n        .required(\"Username required\")\r\n    ,\r\n    email: Yup.string()\r\n        .trim()\r\n        .email(\"Invalid email\")\r\n        .required(\"Email required\")\r\n        .max(50, validationMaxNames)\r\n    ,\r\n    emailRepeat: Yup.string()\r\n        .trim()\r\n        .email(\"Invalid email\")\r\n        .max(50, validationMaxNames)\r\n        .oneOf([Yup.ref('email')], \"Emails don't match\")\r\n        .nullable(true)\r\n    ,\r\n    firstName: Yup.string()\r\n        .trim()\r\n        .required('First name required')\r\n        .matches(regexOnlyLetters, validationOnlyLetters)\r\n        .max(50, validationMaxNames)\r\n    ,\r\n    lastName: Yup.string()\r\n        .trim()\r\n        .required('Last name required')\r\n        .matches(regexOnlyLetters, validationOnlyLetters)\r\n        .max(50, validationMaxNames)\r\n        .notOneOf([Yup.ref('firstName')], \"Names may not match\")\r\n    \r\n});"]},"metadata":{},"sourceType":"module"}