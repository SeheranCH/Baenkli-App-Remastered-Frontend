{"ast":null,"code":"import * as Yup from \"yup\";\nconst regexName = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ,+-]+$/;\nconst validationName = \"Please enter only letters\";\nconst validationMax = \"Max. 250 characters\";\nconst validationMinNumber = \"Minimum: 0\";\nconst validationMinLatitude = \"Minimum of latitude: -90\";\nconst validationMaxLatitude = \"Maximum of latitude: +90\";\nconst validationMinLongitude = \"Minimum of longitude: -180\";\nconst validationMaxLongitude = \"Maximum of longitude: +180\";\nexport const CardValidationSchema = Yup.object().shape({\n  title: Yup.string().trim().matches(regexName, validationName).required(\"Title required\").max(250, validationMax),\n  description: Yup.string().trim().max(250, validationMax).nullable(true),\n  latitude: Yup.number().min(-90, validationMinLatitude).max(90, validationMaxLatitude).nullable(true),\n  longitude: Yup.number().min(-180, validationMinLongitude).max(180, validationMaxLongitude).nullable(true),\n  amountBenches: Yup.number().required(\"Amount of benches required\").min(0, validationMinNumber).integer(\"Integer required\"),\n  amountFirePlaces: Yup.number().required(\"Amount of fire places required\").min(0, validationMinNumber).integer(\"Integer required\"),\n  amountTrashCans: Yup.number().required(\"Amount of trash cans required\").min(0, validationMinNumber).integer(\"Integer required\"),\n  distanceToNextShop: Yup.number().min(0, validationMinNumber).nullable(true).integer(\"Integer required\"),\n  directions: Yup.string().max(250, validationMax).nullable(true)\n});","map":{"version":3,"sources":["C:/Users/swesthauser/Documents/_D/Workspace/tbz/Baenkli-App-Remastered-Frontend/src/components/other/validation/CardValidationSchema.js"],"names":["Yup","regexName","validationName","validationMax","validationMinNumber","validationMinLatitude","validationMaxLatitude","validationMinLongitude","validationMaxLongitude","CardValidationSchema","object","shape","title","string","trim","matches","required","max","description","nullable","latitude","number","min","longitude","amountBenches","integer","amountFirePlaces","amountTrashCans","distanceToNextShop","directions"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,MAAMC,SAAS,GAAG,6BAAlB;AACA,MAAMC,cAAc,GAAG,2BAAvB;AACA,MAAMC,aAAa,GAAG,qBAAtB;AACA,MAAMC,mBAAmB,GAAG,YAA5B;AACA,MAAMC,qBAAqB,GAAG,0BAA9B;AACA,MAAMC,qBAAqB,GAAG,0BAA9B;AACA,MAAMC,sBAAsB,GAAG,4BAA/B;AACA,MAAMC,sBAAsB,GAAG,4BAA/B;AAEA,OAAO,MAAMC,oBAAoB,GAAGT,GAAG,CAACU,MAAJ,GAAaC,KAAb,CAAmB;AACnDC,EAAAA,KAAK,EAAEZ,GAAG,CAACa,MAAJ,GACFC,IADE,GAEFC,OAFE,CAEMd,SAFN,EAEiBC,cAFjB,EAGFc,QAHE,CAGO,gBAHP,EAIFC,GAJE,CAIE,GAJF,EAIOd,aAJP,CAD4C;AAMnDe,EAAAA,WAAW,EAAElB,GAAG,CAACa,MAAJ,GACRC,IADQ,GAERG,GAFQ,CAEJ,GAFI,EAECd,aAFD,EAGRgB,QAHQ,CAGC,IAHD,CANsC;AAUnDC,EAAAA,QAAQ,EAAEpB,GAAG,CAACqB,MAAJ,GACLC,GADK,CACD,CAAC,EADA,EACIjB,qBADJ,EAELY,GAFK,CAED,EAFC,EAEGX,qBAFH,EAGLa,QAHK,CAGI,IAHJ,CAVyC;AAcnDI,EAAAA,SAAS,EAAEvB,GAAG,CAACqB,MAAJ,GACNC,GADM,CACF,CAAC,GADC,EACIf,sBADJ,EAENU,GAFM,CAEF,GAFE,EAEGT,sBAFH,EAGNW,QAHM,CAGG,IAHH,CAdwC;AAkBnDK,EAAAA,aAAa,EAAExB,GAAG,CAACqB,MAAJ,GACVL,QADU,CACD,4BADC,EAEVM,GAFU,CAEN,CAFM,EAEHlB,mBAFG,EAGVqB,OAHU,CAGF,kBAHE,CAlBoC;AAsBnDC,EAAAA,gBAAgB,EAAE1B,GAAG,CAACqB,MAAJ,GACbL,QADa,CACJ,gCADI,EAEbM,GAFa,CAET,CAFS,EAENlB,mBAFM,EAGbqB,OAHa,CAGL,kBAHK,CAtBiC;AA0BnDE,EAAAA,eAAe,EAAE3B,GAAG,CAACqB,MAAJ,GACZL,QADY,CACH,+BADG,EAEZM,GAFY,CAER,CAFQ,EAELlB,mBAFK,EAGZqB,OAHY,CAGJ,kBAHI,CA1BkC;AA8BnDG,EAAAA,kBAAkB,EAAE5B,GAAG,CAACqB,MAAJ,GACfC,GADe,CACX,CADW,EACRlB,mBADQ,EAEfe,QAFe,CAEN,IAFM,EAGfM,OAHe,CAGP,kBAHO,CA9B+B;AAkCnDI,EAAAA,UAAU,EAAE7B,GAAG,CAACa,MAAJ,GACPI,GADO,CACH,GADG,EACEd,aADF,EAEPgB,QAFO,CAEE,IAFF;AAlCuC,CAAnB,CAA7B","sourcesContent":["import * as Yup from \"yup\";\r\n\r\nconst regexName = /^[a-zA-Z äöüéèàÜÖÄÉÈÀ,+-]+$/;\r\nconst validationName = \"Please enter only letters\";\r\nconst validationMax = \"Max. 250 characters\"\r\nconst validationMinNumber = \"Minimum: 0\";\r\nconst validationMinLatitude = \"Minimum of latitude: -90\";\r\nconst validationMaxLatitude = \"Maximum of latitude: +90\";\r\nconst validationMinLongitude = \"Minimum of longitude: -180\";\r\nconst validationMaxLongitude = \"Maximum of longitude: +180\";\r\n\r\nexport const CardValidationSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n        .trim()\r\n        .matches(regexName, validationName)\r\n        .required(\"Title required\")\r\n        .max(250, validationMax),\r\n    description: Yup.string()\r\n        .trim()\r\n        .max(250, validationMax)\r\n        .nullable(true),\r\n    latitude: Yup.number()\r\n        .min(-90, validationMinLatitude)\r\n        .max(90, validationMaxLatitude)\r\n        .nullable(true),\r\n    longitude: Yup.number()\r\n        .min(-180, validationMinLongitude)\r\n        .max(180, validationMaxLongitude)\r\n        .nullable(true),\r\n    amountBenches: Yup.number()\r\n        .required(\"Amount of benches required\")\r\n        .min(0, validationMinNumber)\r\n        .integer(\"Integer required\"),\r\n    amountFirePlaces: Yup.number()\r\n        .required(\"Amount of fire places required\")\r\n        .min(0, validationMinNumber)\r\n        .integer(\"Integer required\"),\r\n    amountTrashCans: Yup.number()\r\n        .required(\"Amount of trash cans required\")\r\n        .min(0, validationMinNumber)\r\n        .integer(\"Integer required\"),\r\n    distanceToNextShop: Yup.number()\r\n        .min(0, validationMinNumber)\r\n        .nullable(true)\r\n        .integer(\"Integer required\"),\r\n    directions: Yup.string()\r\n        .max(250, validationMax)\r\n        .nullable(true)\r\n});"]},"metadata":{},"sourceType":"module"}